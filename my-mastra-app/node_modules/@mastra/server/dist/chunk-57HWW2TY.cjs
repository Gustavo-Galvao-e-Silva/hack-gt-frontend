'use strict';

var chunkGDWMF6SB_cjs = require('./chunk-GDWMF6SB.cjs');
var chunkRE4RPXT2_cjs = require('./chunk-RE4RPXT2.cjs');
var chunk7NADHFD2_cjs = require('./chunk-7NADHFD2.cjs');
var chunkEMMSS5I5_cjs = require('./chunk-EMMSS5I5.cjs');
var web = require('stream/web');

// src/server/handlers/workflows.ts
var workflows_exports = {};
chunkEMMSS5I5_cjs.__export(workflows_exports, {
  cancelWorkflowRunHandler: () => cancelWorkflowRunHandler,
  createWorkflowRunHandler: () => createWorkflowRunHandler,
  getWorkflowByIdHandler: () => getWorkflowByIdHandler,
  getWorkflowRunByIdHandler: () => getWorkflowRunByIdHandler,
  getWorkflowRunExecutionResultHandler: () => getWorkflowRunExecutionResultHandler,
  getWorkflowRunsHandler: () => getWorkflowRunsHandler,
  getWorkflowsHandler: () => getWorkflowsHandler,
  observeStreamWorkflowHandler: () => observeStreamWorkflowHandler,
  resumeAsyncWorkflowHandler: () => resumeAsyncWorkflowHandler,
  resumeStreamWorkflowHandler: () => resumeStreamWorkflowHandler,
  resumeWorkflowHandler: () => resumeWorkflowHandler,
  sendWorkflowRunEventHandler: () => sendWorkflowRunEventHandler,
  startAsyncWorkflowHandler: () => startAsyncWorkflowHandler,
  startWorkflowRunHandler: () => startWorkflowRunHandler,
  streamVNextWorkflowHandler: () => streamVNextWorkflowHandler,
  streamWorkflowHandler: () => streamWorkflowHandler,
  watchWorkflowHandler: () => watchWorkflowHandler
});
async function getWorkflowsHandler({ mastra }) {
  try {
    const workflows = mastra.getWorkflows({ serialized: false });
    const _workflows = Object.entries(workflows).reduce((acc, [key, workflow]) => {
      acc[key] = chunkGDWMF6SB_cjs.getWorkflowInfo(workflow);
      return acc;
    }, {});
    return _workflows;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting workflows");
  }
}
async function getWorkflowsFromSystem({ mastra, workflowId }) {
  const logger = mastra.getLogger();
  if (!workflowId) {
    throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
  }
  let workflow;
  workflow = chunkGDWMF6SB_cjs.WorkflowRegistry.getWorkflow(workflowId);
  if (!workflow) {
    try {
      workflow = mastra.getWorkflow(workflowId);
    } catch (error) {
      logger.debug("Error getting workflow, searching agents for workflow", error);
    }
  }
  if (!workflow) {
    logger.debug("Workflow not found, searching agents for workflow", { workflowId });
    const agents = mastra.getAgents();
    if (Object.keys(agents || {}).length) {
      for (const [_, agent] of Object.entries(agents)) {
        try {
          const workflows = await agent.getWorkflows();
          if (workflows[workflowId]) {
            workflow = workflows[workflowId];
            break;
          }
          break;
        } catch (error) {
          logger.debug("Error getting workflow from agent", error);
        }
      }
    }
  }
  if (!workflow) {
    throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
  }
  return { workflow };
}
async function getWorkflowByIdHandler({ mastra, workflowId }) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    return chunkGDWMF6SB_cjs.getWorkflowInfo(workflow);
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting workflow");
  }
}
async function getWorkflowRunByIdHandler({
  mastra,
  workflowId,
  runId
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Run ID is required" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    return run;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting workflow run");
  }
}
async function getWorkflowRunExecutionResultHandler({
  mastra,
  workflowId,
  runId
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Run ID is required" });
    }
    const workflow = mastra.getWorkflow(workflowId);
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const executionResult = await workflow.getWorkflowRunExecutionResult(runId);
    if (!executionResult) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run execution result not found" });
    }
    return executionResult;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting workflow run execution result");
  }
}
async function createWorkflowRunHandler({
  mastra,
  workflowId,
  runId: prevRunId
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.createRunAsync({ runId: prevRunId });
    return { runId: run.runId };
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error creating workflow run");
  }
}
async function startAsyncWorkflowHandler({
  mastra,
  runtimeContext,
  workflowId,
  runId,
  inputData
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    const result = await _run.start({
      inputData,
      runtimeContext
    });
    return result;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error starting async workflow");
  }
}
async function startWorkflowRunHandler({
  mastra,
  runtimeContext,
  workflowId,
  runId,
  inputData
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to start run" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    void _run.start({
      inputData,
      runtimeContext
    });
    return { message: "Workflow run started" };
  } catch (e) {
    return chunkRE4RPXT2_cjs.handleError(e, "Error starting workflow run");
  }
}
async function watchWorkflowHandler({
  mastra,
  workflowId,
  runId,
  eventType = "watch"
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to watch workflow" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    let unwatch;
    let asyncRef = null;
    const stream = new web.ReadableStream({
      start(controller) {
        unwatch = _run.watch((event) => {
          const { type, payload, eventTimestamp } = event;
          controller.enqueue(JSON.stringify({ type, payload, eventTimestamp, runId }));
          if (asyncRef) {
            clearImmediate(asyncRef);
            asyncRef = null;
          }
          asyncRef = setImmediate(async () => {
            const runDone = eventType === "watch" ? payload.workflowState.status !== "running" : type === "finish";
            if (runDone) {
              controller.close();
              unwatch?.();
            }
          });
        }, eventType);
      },
      cancel() {
        if (asyncRef) {
          clearImmediate(asyncRef);
          asyncRef = null;
        }
        unwatch?.();
      }
    });
    return stream;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error watching workflow");
  }
}
async function streamWorkflowHandler({
  mastra,
  runtimeContext,
  workflowId,
  runId,
  inputData
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to resume workflow" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const serverCache = mastra.getServerCache();
    const run = await workflow.createRunAsync({ runId });
    const result = run.stream({
      inputData,
      runtimeContext,
      onChunk: async (chunk) => {
        if (serverCache) {
          const cacheKey = runId;
          await serverCache.listPush(cacheKey, chunk);
        }
      }
    });
    return result;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error executing workflow");
  }
}
async function observeStreamWorkflowHandler({
  mastra,
  workflowId,
  runId
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to observe workflow stream" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    const serverCache = mastra.getServerCache();
    if (!serverCache) {
      throw new chunk7NADHFD2_cjs.HTTPException(500, { message: "Server cache not found" });
    }
    const transformStream = new web.TransformStream();
    const writer = transformStream.writable.getWriter();
    const cachedRunChunks = await serverCache.listFromTo(runId, 0);
    for (const chunk of cachedRunChunks) {
      await writer.write(chunk);
    }
    writer.releaseLock();
    const result = _run.observeStream();
    return result.stream?.pipeThrough(transformStream);
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error observing workflow stream");
  }
}
async function streamVNextWorkflowHandler({
  mastra,
  runtimeContext,
  workflowId,
  runId,
  inputData,
  closeOnSuspend
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to stream workflow" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.createRunAsync({ runId });
    const result = run.streamVNext({
      inputData,
      runtimeContext,
      closeOnSuspend
    });
    return result;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error streaming workflow");
  }
}
async function resumeAsyncWorkflowHandler({
  mastra,
  workflowId,
  runId,
  body,
  runtimeContext
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to resume workflow" });
    }
    if (!body.step) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "step required to resume workflow" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    const result = await _run.resume({
      step: body.step,
      resumeData: body.resumeData,
      runtimeContext
    });
    return result;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error resuming workflow step");
  }
}
async function resumeWorkflowHandler({
  mastra,
  workflowId,
  runId,
  body,
  runtimeContext
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to resume workflow" });
    }
    if (!body.step) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "step required to resume workflow" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    void _run.resume({
      step: body.step,
      resumeData: body.resumeData,
      runtimeContext
    });
    return { message: "Workflow run resumed" };
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error resuming workflow");
  }
}
async function resumeStreamWorkflowHandler({
  mastra,
  workflowId,
  runId,
  body,
  runtimeContext
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to resume workflow" });
    }
    if (!body.step) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "step required to resume workflow" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    const stream = await _run.resumeStreamVNext({
      step: body.step,
      resumeData: body.resumeData,
      runtimeContext
    });
    return stream;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error resuming workflow");
  }
}
async function getWorkflowRunsHandler({
  mastra,
  workflowId,
  fromDate,
  toDate,
  limit,
  offset,
  resourceId
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const workflowRuns = await workflow.getWorkflowRuns({ fromDate, toDate, limit, offset, resourceId }) || {
      runs: [],
      total: 0
    };
    return workflowRuns;
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error getting workflow runs");
  }
}
async function cancelWorkflowRunHandler({
  mastra,
  workflowId,
  runId
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to cancel workflow run" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    await _run.cancel();
    return { message: "Workflow run cancelled" };
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error canceling workflow run");
  }
}
async function sendWorkflowRunEventHandler({
  mastra,
  workflowId,
  runId,
  event,
  data
}) {
  try {
    if (!workflowId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Workflow ID is required" });
    }
    if (!runId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "runId required to send workflow run event" });
    }
    const { workflow } = await getWorkflowsFromSystem({ mastra, workflowId });
    if (!workflow) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow not found" });
    }
    const run = await workflow.getWorkflowRunById(runId);
    if (!run) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: "Workflow run not found" });
    }
    const _run = await workflow.createRunAsync({ runId });
    await _run.sendEvent(event, data);
    return { message: "Workflow run event sent" };
  } catch (error) {
    return chunkRE4RPXT2_cjs.handleError(error, "Error sending workflow run event");
  }
}

exports.cancelWorkflowRunHandler = cancelWorkflowRunHandler;
exports.createWorkflowRunHandler = createWorkflowRunHandler;
exports.getWorkflowByIdHandler = getWorkflowByIdHandler;
exports.getWorkflowRunByIdHandler = getWorkflowRunByIdHandler;
exports.getWorkflowRunExecutionResultHandler = getWorkflowRunExecutionResultHandler;
exports.getWorkflowRunsHandler = getWorkflowRunsHandler;
exports.getWorkflowsHandler = getWorkflowsHandler;
exports.observeStreamWorkflowHandler = observeStreamWorkflowHandler;
exports.resumeAsyncWorkflowHandler = resumeAsyncWorkflowHandler;
exports.resumeStreamWorkflowHandler = resumeStreamWorkflowHandler;
exports.resumeWorkflowHandler = resumeWorkflowHandler;
exports.sendWorkflowRunEventHandler = sendWorkflowRunEventHandler;
exports.startAsyncWorkflowHandler = startAsyncWorkflowHandler;
exports.startWorkflowRunHandler = startWorkflowRunHandler;
exports.streamVNextWorkflowHandler = streamVNextWorkflowHandler;
exports.streamWorkflowHandler = streamWorkflowHandler;
exports.watchWorkflowHandler = watchWorkflowHandler;
exports.workflows_exports = workflows_exports;
//# sourceMappingURL=chunk-57HWW2TY.cjs.map
//# sourceMappingURL=chunk-57HWW2TY.cjs.map