import { ReadableStream } from 'node:stream/web';
import type { RuntimeContext } from '@mastra/core/di';
import type { WorkflowRuns } from '@mastra/core/storage';
import type { Workflow, WatchEvent, WorkflowInfo, StreamEvent } from '@mastra/core/workflows';
import type { Context } from '../types.js';
export interface WorkflowContext extends Context {
    workflowId?: string;
    runId?: string;
}
export declare function getWorkflowsHandler({ mastra }: WorkflowContext): Promise<Record<string, WorkflowInfo>>;
export declare function getWorkflowByIdHandler({ mastra, workflowId }: WorkflowContext): Promise<WorkflowInfo>;
export declare function getWorkflowRunByIdHandler({ mastra, workflowId, runId, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>): Promise<ReturnType<Workflow['getWorkflowRunById']>>;
export declare function getWorkflowRunExecutionResultHandler({ mastra, workflowId, runId, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>): Promise<WatchEvent['payload']['workflowState']>;
export declare function createWorkflowRunHandler({ mastra, workflowId, runId: prevRunId, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>): Promise<{
    runId: string;
}>;
export declare function startAsyncWorkflowHandler({ mastra, runtimeContext, workflowId, runId, inputData, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {
    inputData?: unknown;
    runtimeContext?: RuntimeContext;
}): Promise<import("@mastra/core").WorkflowResult<any, any, any>>;
export declare function startWorkflowRunHandler({ mastra, runtimeContext, workflowId, runId, inputData, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {
    inputData?: unknown;
    runtimeContext?: RuntimeContext;
}): Promise<{
    message: string;
}>;
export declare function watchWorkflowHandler({ mastra, workflowId, runId, eventType, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {
    eventType?: 'watch' | 'watch-v2';
}): Promise<ReadableStream<string>>;
export declare function streamWorkflowHandler({ mastra, runtimeContext, workflowId, runId, inputData, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {
    inputData?: unknown;
    runtimeContext?: RuntimeContext;
}): Promise<{
    stream: ReadableStream<StreamEvent>;
    getWorkflowState: () => Promise<import("@mastra/core").WorkflowResult<any, any, any>>;
}>;
export declare function observeStreamWorkflowHandler({ mastra, workflowId, runId, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>): Promise<ReadableStream<StreamEvent>>;
export declare function streamVNextWorkflowHandler({ mastra, runtimeContext, workflowId, runId, inputData, closeOnSuspend, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {
    inputData?: unknown;
    runtimeContext?: RuntimeContext;
    closeOnSuspend?: boolean;
}): Promise<import("@mastra/core").MastraWorkflowStream<any, any, any>>;
export declare function resumeAsyncWorkflowHandler({ mastra, workflowId, runId, body, runtimeContext, }: WorkflowContext & {
    body: {
        step: string | string[];
        resumeData?: unknown;
    };
    runtimeContext?: RuntimeContext;
}): Promise<import("@mastra/core").WorkflowResult<any, any, any>>;
export declare function resumeWorkflowHandler({ mastra, workflowId, runId, body, runtimeContext, }: WorkflowContext & {
    body: {
        step: string | string[];
        resumeData?: unknown;
    };
    runtimeContext?: RuntimeContext;
}): Promise<{
    message: string;
}>;
export declare function resumeStreamWorkflowHandler({ mastra, workflowId, runId, body, runtimeContext, }: WorkflowContext & {
    body: {
        step: string | string[];
        resumeData?: unknown;
    };
    runtimeContext?: RuntimeContext;
}): Promise<import("@mastra/core").MastraWorkflowStream<any, any, any>>;
export declare function getWorkflowRunsHandler({ mastra, workflowId, fromDate, toDate, limit, offset, resourceId, }: WorkflowContext & {
    fromDate?: Date;
    toDate?: Date;
    limit?: number;
    offset?: number;
    resourceId?: string;
}): Promise<WorkflowRuns>;
export declare function cancelWorkflowRunHandler({ mastra, workflowId, runId, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'>): Promise<{
    message: string;
}>;
export declare function sendWorkflowRunEventHandler({ mastra, workflowId, runId, event, data, }: Pick<WorkflowContext, 'mastra' | 'workflowId' | 'runId'> & {
    event: string;
    data: unknown;
}): Promise<{
    message: string;
}>;
//# sourceMappingURL=workflows.d.ts.map